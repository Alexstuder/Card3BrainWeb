openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:9001
  description: Generated server url
paths:
  /api/users/update:
    put:
      tags:
      - user-rest-controller
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDto'
  /api/users/add:
    post:
      tags:
      - user-rest-controller
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDto'
  /api/category/add:
    post:
      tags:
      - category-rest-controller
      operationId: createCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CategoryDto'
  /api/cards/add:
    post:
      tags:
      - card-rest-controller
      operationId: createCard
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Card'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CardsDto'
  /healthCheck:
    get:
      tags:
      - health-check
      operationId: healthCheck
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/users:
    get:
      tags:
      - user-rest-controller
      operationId: getAllUsers
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UsersDto'
  /api/users/:
    get:
      tags:
      - user-rest-controller
      operationId: getAllUsers_1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UsersDto'
  /api/category/user:
    get:
      tags:
      - category-rest-controller
      operationId: getAllCategoriesOfUser
      parameters:
      - name: user
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/User'
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CategoryDto'
  /api/category/find/{userName}:
    get:
      tags:
      - category-rest-controller
      operationId: getAllCategoriesOfUserName
      parameters:
      - name: userName
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CategoryDto'
  /api/cards/:
    get:
      tags:
      - card-rest-controller
      operationId: getCardsByCategory
      parameters:
      - name: category
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CardsDto'
  /api/cards:
    get:
      tags:
      - card-rest-controller
      operationId: getCardsByCategory_1
      parameters:
      - name: category
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CardsDto'
  /:
    get:
      tags:
      - health-check
      operationId: index
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /api/users/delete:
    delete:
      tags:
      - user-rest-controller
      operationId: deleteUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDto'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        userName:
          type: string
        firstName:
          type: string
        mailAddress:
          type: string
    UserDto:
      type: object
      properties:
        message:
          type: string
        token:
          type: string
        userName:
          type: string
        firstName:
          type: string
        mailAddress:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        categoryName:
          type: string
        owner:
          $ref: '#/components/schemas/User'
    CategoryDto:
      type: object
      properties:
        message:
          type: string
        token:
          type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    Card:
      type: object
      properties:
        id:
          type: integer
          format: int64
        question:
          type: string
        answer:
          type: string
        counterRight:
          type: integer
          format: int32
        counterFalse:
          type: integer
          format: int32
        answeredLastTime:
          type: string
          format: date-time
        nextDateToRepeat:
          type: string
          format: date
        correctAnswersInRow:
          type: integer
          format: int32
        category:
          $ref: '#/components/schemas/Category'
    CardsDto:
      type: object
      properties:
        message:
          type: string
        token:
          type: string
        cards:
          type: array
          items:
            $ref: '#/components/schemas/Card'
    UsersDto:
      type: object
      properties:
        message:
          type: string
        token:
          type: string
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
